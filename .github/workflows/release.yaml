# This has been brazenly copied from https://github.com/laravel/framework/blob/11.x/.github/workflows/releases.yml
name: manual release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-24.04

    name: Release ${{ inputs.version }}

    outputs:
      version: ${{ steps.version.outputs.version }}
      notes: ${{ steps.cleaned-notes.outputs.notes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove optional "v" prefix
        id: version
        run: |
          echo "version=${VERSION#v}" >> "$GITHUB_OUTPUT"
        env:
          VERSION: ${{ inputs.version }}

      - name: Check if branch and version match
        id: guard
        run: |
          MAJOR_VERSION="${NUMERIC_VERSION%%.*}"
          BRANCH_MAJOR_VERSION="${BRANCH%%.*}"

          if [ "$MAJOR_VERSION" != "$BRANCH_MAJOR_VERSION" ]; then
            echo "Mismatched versions! Aborting."
            VERSION_MISMATCH='true';
          else
            echo "Versions match! Proceeding."
            VERSION_MISMATCH='false';
          fi

          echo "VERSION_MISMATCH=$(echo $VERSION_MISMATCH)" >> "$GITHUB_OUTPUT";
        env:
          BRANCH: ${{ github.ref_name }}
          NUMERIC_VERSION: ${{ steps.version.outputs.version }}

      - name: Fail if branch and release tag do not match
        if: ${{ steps.guard.outputs.VERSION_MISMATCH == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('Workflow failed. Release version does not match with selected target branch. Did you select the correct branch?')

      - name: Commit version change
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update version to v${{ steps.version.outputs.version }}"

      # Create a package before we do any tagging
      # Taken from https://github.com/monicahq/monica/blob/main/.github/workflows/release.yml

# not now
#      - name: Import key
#        run: echo -e "$GPG_KEY" | gpg --batch --yes --import -
#        env:
#          GPG_KEY: ${{ secrets.GPG_KEY }}
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: dom, curl, libxml, mbstring, zip, pdo, gd, :php-psr
          ini-values: error_reporting=E_ALL
          tools: composer:v2

      - name: Create package
        id: package
        run: |
          chmod +x scripts/ci/package.sh
          scripts/ci/package.sh 'v${{ steps.version.outputs.version }}' $GITHUB_SHA

      - name: Create tagged version
        uses: rickstaa/action-create-tag@v1.7.2
        with:
          tag: v${{ steps.version.outputs.version }}
          tag_exists_error: true

      - name: Generate release notes
        id: generated-notes
        uses: RedCrafter07/release-notes-action@v1.0.1
        with:
          tag-name: v${{ steps.version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name }}

      - name: Cleanup release notes
        id: cleaned-notes
        run: |
          START_FROM=$(echo -n "$RELEASE_NOTES" | awk "/What's Changed/{ print NR; exit }" -)
          DROP_FROM_CONTRIBUTORS=$(echo -n "$RELEASE_NOTES" | awk "/New Contributors/{ print NR; exit }" -)
          DROP_FROM_FULL_CHANGELOG=$(echo -n "$RELEASE_NOTES" | awk "/Full Changelog/{ print NR; exit }" -)

          # Drop everything starting from "Full Changelog"
          if [ ! -z "$DROP_FROM_FULL_CHANGELOG" ]; then
              RELEASE_NOTES=$(echo -n "$RELEASE_NOTES" | sed "${DROP_FROM_FULL_CHANGELOG},$ d")
          fi

          # Drop everything starting from "New Contributors"
          if [ ! -z "$DROP_FROM_CONTRIBUTORS" ]; then
              RELEASE_NOTES=$(echo -n "$RELEASE_NOTES" | sed "${DROP_FROM_CONTRIBUTORS},$ d")
          fi

          # Drop the line "What's Changed"
          if [ ! -z "$START_FROM" ]; then
              RELEASE_NOTES=$(echo -n "$RELEASE_NOTES" | sed "${START_FROM}d")
          fi

          # Make sure that we have a default string, otherwise updating changelog fails
          if [ -z "$RELEASE_NOTES" ]; then
             RELEASE_NOTES="* nothing of interest this time"
          fi

          {
            echo 'notes<<EOF'
            echo "$RELEASE_NOTES"
            echo EOF
          } >> "$GITHUB_OUTPUT";
        env:
          RELEASE_NOTES: ${{ steps.generated-notes.outputs.release-notes }}

#        env:
#          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
#          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body: ${{ steps.cleaned-notes.outputs.notes }}
          target_commitish: ${{ github.ref_name }}
          make_latest: "${{ github.ref_name == github.event.repository.default_branch }}"
          files: |
            ${{ steps.package.outputs.package }}
            ${{ steps.package.outputs.package }}.asc
            ${{ steps.package.outputs.package }}.sha512
            ${{ steps.package.outputs.package }}.sha512.asc

  update-changelog:
    needs: release

    name: Update changelog

    uses: swiss-architecture-knife/.github/.github/workflows/update-changelog.yaml@main
    with:
      branch: ${{ github.ref_name }}
      version: "v${{ needs.release.outputs.version }}"
      notes: ${{ needs.release.outputs.notes }}

  dispatch-docker-release:
    needs: release

    runs-on: ubuntu-24.04

    name: Dispatch Docker workflow

    steps:
      - name: Send upstream request
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Release new Docker image
          repo: swiss-architecture-knife/docker
          ref: refs/heads/main
          token: ${{ secrets.DISPATCH_DOCKER_GITHUB_TOKEN }}
          inputs: '{"swark_version": "${{ needs.release.outputs.version }}"}'
